AWSTemplateFormatVersion: '2010-09-09'
Description: LambdaTV S3 image tag setup

Resources:
  OurBucket:
    Type: AWS::S3::Bucket
    DependsOn: InvokePermission
    Properties:
      BucketName: !Sub 'lambdatv-s3-image-tag-${AWS::AccountId}'
      NotificationConfiguration:
        LambdaConfigurations:
        -  Event: 's3:ObjectCreated:*'
           Function: !Sub '${PutImageFn.Arn}'
           Filter:
             S3Key:
               Rules:
               - Name: suffix
                 Value: .jpg
        -  Event: 's3:ObjectCreated:*'
           Function: !Sub '${PutImageFn.Arn}'
           Filter:
             S3Key:
               Rules:
               - Name: suffix
                 Value: .jpeg
        -  Event: 's3:ObjectCreated:*'
           Function: !Sub '${PutImageFn.Arn}'
           Filter:
             S3Key:
               Rules:
               - Name: suffix
                 Value: .png
  PutImageFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3

          rek = boto3.client('rekognition')
          s3 = boto3.client('s3')


          def image_handler(event, context):
              for record in event['Records']:
                  bucket_name = record['s3']['bucket']['name']
                  object_key = record['s3']['object']['key']
                  result = rek.detect_labels(Image={'S3Object': {'Bucket': bucket_name, 'Name': object_key}}, MinConfidence=90,
                                             MaxLabels=4)

                  tag_sets = []
                  for label in result['Labels']:
                      name = label['Name']
                      confidence = label['Confidence']
                      tag_sets.append({'Key': name, 'Value': str(confidence)})

                  result = rek.recognize_celebrities(Image={'S3Object': {'Bucket': bucket_name, 'Name': object_key}})
                  for face in result['CelebrityFaces']:
                      name = face['Name']
                      confidence = face['MatchConfidence']
                      if confidence > 90:
                          tag_sets.append({'Key': name, 'Value': str(confidence)})

                  s3.put_object_tagging(Bucket=bucket_name, Key=object_key, Tagging={'TagSet': tag_sets[:10]})
      Handler: index.image_handler
      Runtime: python3.6
      Role: !Sub '${Role.Arn}'
      Timeout: 60
      ReservedConcurrentExecutions: 10

  InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PutImageFn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::lambdatv-s3-image-tag-${AWS::AccountId}'
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
      - PolicyName: tag
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ['s3:PutObjectTagging', 's3:GetObject']
            Resource: !Sub 'arn:aws:s3:::lambdatv-s3-image-tag-${AWS::AccountId}/*'
          - Effect: Allow
            Action: ['rekognition:DetectLabels', 'rekognition:RecognizeCelebrities']
            Resource: '*'
